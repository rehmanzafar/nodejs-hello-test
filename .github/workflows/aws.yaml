name: Deploy to EKS

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REPOSITORY: nodejs-hello
      IMAGE_TAG: ${{ github.sha }}
      CLUSTER_NAME: nodejs-eks-cluster
      AWS_REGION: us-east-1
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

    #- name: Deploy to EKS
    #  run: |
    #    sed "s|IMAGE_PLACEHOLDER|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/deployment.yaml > k8s/deployment.generated.yaml
    #    kubectl apply -f k8s/deployment.generated.yaml
    #    kubectl apply -f k8s/service.yaml

    - name: Determine current live version
      id: version-check
      run: |
        CURRENT_VERSION=$(kubectl get svc nodejs-service -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "none")

        echo "Current version: $CURRENT_VERSION"
        if [ "$CURRENT_VERSION" = "blue" ]; then
          echo "NEXT_VERSION=green" >> $GITHUB_ENV
        else
          echo "NEXT_VERSION=blue" >> $GITHUB_ENV
        fi

    - name: Deploy new version
      run: |
        sed "s|IMAGE_PLACEHOLDER|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" \
          k8s/deployment-${{ env.NEXT_VERSION }}.yaml > k8s/deployment.generated.yaml

        kubectl apply -f k8s/deployment.generated.yaml
        kubectl apply -f k8s/service.yaml
        
        kubectl rollout status deployment/nodejs-${{ env.NEXT_VERSION }}

    - name: Switch service to new version
      run: |
        kubectl patch service nodejs-service \
          -p "{\"spec\":{\"selector\":{\"app\":\"nodejs-hello\",\"version\":\"${{ env.NEXT_VERSION }}\"}}}"

    - name: Cleanup older version
      run: |
        CURRENT_VERSION=$(kubectl get svc nodejs-service -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "none")
        if [ "$CURRENT_VERSION" = "green" ]; then
          kubectl delete deployment nodejs-blue || true
        else
          kubectl delete deployment nodejs-green || true
        fi